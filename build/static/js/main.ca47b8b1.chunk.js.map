{"version":3,"sources":["Components/Header/Header.js","axios.js","Components/TinderCards/TinderCards.js","firebase.js","Components/SwipeButtons/SwipeButtons.js","Components/Chat/Chat.js","Components/Chats/Chats.js","Components/ChatScreen/ChatScreen.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","instance","axios","create","baseURL","TinderCards","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","useState","people","setPeople","useEffect","a","get","req","data","fetchData","map","person","key","name","preventSwipe","onSwipe","direction","nameToDelete","console","log","onCardLeftScreen","style","backgroundImage","url","SwipeButtons","Chat","message","profilePic","timestamp","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","toUpperCase","value","onChange","e","target","placeholder","type","preventDefault","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"uXAqCeA,G,MA7BA,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACVC,EAAUC,cAChB,OACE,yBAAKC,UAAU,UACZH,EACC,kBAACI,EAAA,EAAD,CAAYC,QAAS,kBAAMJ,EAAQK,QAAQN,KACzC,kBAAC,IAAD,CAAkBO,SAAS,QAAQJ,UAAU,kBAG/C,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAYG,SAAS,QAAQJ,UAAU,kBAG3C,kBAAC,IAAD,CAAMK,GAAG,KACP,yBACEL,UAAU,eACVM,IAAI,mEACJC,IAAI,iBAGR,kBAAC,IAAD,CAAMF,GAAG,SACP,kBAACJ,EAAA,EAAD,KACE,kBAAC,IAAD,CAAWG,SAAS,QAAQJ,UAAU,sB,0DCxBjCQ,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,0C,QCwDIC,G,OC/CKC,EAASC,cAVN,CACrBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAIoBC,Y,ODPT,WAAO,IAAD,EACIC,mBAAS,IADb,mBACjBC,EADiB,KACTC,EADS,KAaxBC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACoBlB,EAAMmB,IAAI,iBAD9B,OACQC,EADR,OAEEJ,EAAUI,EAAIC,MAFhB,4CADc,uBAAC,WAAD,wBAKdC,KACC,IAUH,OACE,6BACE,yBAAK/B,UAAU,8BACZwB,EAAOQ,KAAI,SAACC,GAAD,OACV,kBAAC,IAAD,CACEjC,UAAU,QACVkC,IAAKD,EAAOE,KACZC,aAAc,CAAC,KAAM,QACrBC,QAAS,SAACC,GAAD,OAhBQC,EAgByBN,EAAOE,UAfzDK,QAAQC,IAAI,aAAeF,GADd,IAAYA,GAiBjBG,iBAAkB,kBAbRP,EAayBF,EAAOE,UAZlDK,QAAQC,IAAIN,EAAO,mBADF,IAACA,IAeV,yBACEQ,MAAO,CAAEC,gBAAgB,OAAD,OAASX,EAAOY,IAAhB,MACxB7C,UAAU,QAEV,4BAAKiC,EAAOE,e,qFEfXW,G,OA1BM,WACnB,OACE,yBAAK9C,UAAU,gBACb,kBAACC,EAAA,EAAD,CAAYD,UAAU,wBACpB,kBAAC,IAAD,CAAYI,SAAS,WAGvB,kBAACH,EAAA,EAAD,CAAYD,UAAU,sBACpB,kBAAC,IAAD,CAAWI,SAAS,WAGtB,kBAACH,EAAA,EAAD,CAAYD,UAAU,sBACpB,kBAAC,IAAD,CAAcI,SAAS,WAGzB,kBAACH,EAAA,EAAD,CAAYD,UAAU,uBACpB,kBAAC,IAAD,CAAcI,SAAS,WAGzB,kBAACH,EAAA,EAAD,CAAYD,UAAU,2BACpB,kBAAC,IAAD,CAAaI,SAAS,c,SCTf2C,G,OAfF,SAAC,GAA8C,IAA5CZ,EAA2C,EAA3CA,KAAMa,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UACzC,OACE,kBAAC,IAAD,CAAM7C,GAAE,gBAAW8B,IACjB,yBAAKnC,UAAU,QACb,kBAACmD,EAAA,EAAD,CAAQnD,UAAU,cAAcO,IAAK4B,EAAM7B,IAAK2C,IAChD,yBAAKjD,UAAU,iBACb,4BAAKmC,GACL,2BAAIa,IAEN,uBAAGhD,UAAU,mBAAmBkD,OCqBzBE,G,OA/BD,WACZ,OACE,6BACE,kBAAC,EAAD,CACEjB,KAAK,SACLa,QAAQ,kCACRE,UAAU,iBACVD,WAAW,mIAEb,kBAAC,EAAD,CACEd,KAAK,UACLa,QAAQ,iCACRE,UAAU,iBACVD,WAAW,iFAEb,kBAAC,EAAD,CACEd,KAAK,WACLa,QAAQ,oBACRE,UAAU,aACVD,WAAW,6EAEb,kBAAC,EAAD,CACEd,KAAK,OACLa,QAAQ,oBACRE,UAAU,aACVD,WAAW,uE,QCoCJI,G,OA7DI,WAAO,IAAD,EACG9B,mBAAS,IADZ,mBAChB+B,EADgB,KACTC,EADS,OAEShC,mBAAS,CACvC,CACEY,KAAM,SACNqB,MACE,iIACFR,QAAS,mCAEX,CAAEA,QAAS,6CATU,mBAEhBS,EAFgB,KAENC,EAFM,KAkBvB,OACE,yBAAK1D,UAAU,cACZyD,EAASzB,KAAI,SAACgB,GAAD,OACZA,EAAQb,KACN,oCACE,uBAAGnC,UAAU,yBAAb,oBACoBgD,EAAQb,KAAKwB,cADjC,gBAGA,yBAAK3D,UAAU,uBACb,kBAACmD,EAAA,EAAD,CACEnD,UAAU,oBACVO,IAAKyC,EAAQb,KACb7B,IAAK0C,EAAQQ,QAEf,uBAAGxD,UAAU,oBAAoBgD,EAAQA,WAI7C,yBAAKhD,UAAU,uBACb,uBAAGA,UAAU,wBAAwBgD,EAAQA,aAInD,0BAAMhD,UAAU,qBACd,2BACE4D,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAASO,EAAEC,OAAOH,QACnC5D,UAAU,yBACVgE,YAAY,oBACZC,KAAK,SAEP,4BACE/D,QAtCW,SAAC4D,GAClBA,EAAEI,iBACFR,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAAET,QAASM,MACrCC,EAAS,KAoCHU,KAAK,SACLjE,UAAU,2BAHZ,Y,OCDOmE,MA3Cf,WACE,OACE,yBAAKnE,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoE,KAAK,iBACV,kBAAC,EAAD,CAAQvE,WAAW,UACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOuE,KAAK,SACV,kBAAC,EAAD,CAAQvE,WAAW,MACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOwE,OAAK,EAACD,KAAK,KAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,WCbQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMvC,a","file":"static/js/main.ca47b8b1.chunk.js","sourcesContent":["import React from \"react\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport ForumIcon from \"@material-ui/icons/Forum\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport \"./Header.css\";\n\nconst Header = ({ backButton }) => {\n  const history = useHistory();\n  return (\n    <div className=\"header\">\n      {backButton ? (\n        <IconButton onClick={() => history.replace(backButton)}>\n          <ArrowBackIosIcon fontSize=\"large\" className=\"header__icon\" />\n        </IconButton>\n      ) : (\n        <IconButton>\n          <PersonIcon fontSize=\"large\" className=\"header__icon\" />\n        </IconButton>\n      )}\n      <Link to=\"/\">\n        <img\n          className=\"header__logo\"\n          src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\"\n          alt=\"tinder-logo\"\n        ></img>\n      </Link>\n      <Link to=\"/chat\">\n        <IconButton>\n          <ForumIcon fontSize=\"large\" className=\"header__icon\" />\n        </IconButton>\n      </Link>\n    </div>\n  );\n};\n\nexport default Header;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://trilder-backend.herokuapp.com\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport TinderCard from \"react-tinder-card\";\nimport axios from \"../../axios\";\nimport database from \"../../firebase\";\nimport \"./TinderCards.css\";\n\nconst TinderCards = () => {\n  const [people, setPeople] = useState([]);\n\n  // useEffect(() => {\n  //   const unsubscribe = database.collection(\"people\").onSnapshot((snapshop) => {\n  //     setPeople(snapshop.docs.map((doc) => doc.data()));\n  //   });\n  //   return () => {\n  //     //this is the cleanup..\n  //     unsubscribe();\n  //   };\n  // }, []);\n\n  useEffect(() => {\n    async function fetchData() {\n      const req = await axios.get(\"/tinder/cards\");\n      setPeople(req.data);\n    }\n    fetchData();\n  }, []);\n\n  const swiped = (direction, nameToDelete) => {\n    console.log(\"removing: \" + nameToDelete);\n  };\n\n  const outOfframe = (name) => {\n    console.log(name + \"left the screen\");\n  };\n\n  return (\n    <div>\n      <div className=\"tinderCards__cardContainer\">\n        {people.map((person) => (\n          <TinderCard\n            className=\"swipe\"\n            key={person.name}\n            preventSwipe={[\"up\", \"down\"]}\n            onSwipe={(direction) => swiped(direction, person.name)}\n            onCardLeftScreen={() => outOfframe(person.name)}\n          >\n            <div\n              style={{ backgroundImage: `url(${person.url})` }}\n              className=\"card\"\n            >\n              <h3>{person.name}</h3>\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TinderCards;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAWpQHDC9ThOwKU3qz0qOhl3qjBLltqZEw\",\n  authDomain: \"tinder-clone-a5137.firebaseapp.com\",\n  databaseURL: \"https://tinder-clone-a5137.firebaseio.com\",\n  projectId: \"tinder-clone-a5137\",\n  storageBucket: \"tinder-clone-a5137.appspot.com\",\n  messagingSenderId: \"287980669724\",\n  appId: \"1:287980669724:web:9668cd221852032cce88d9\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst database = firebaseApp.firestore();\n\nexport default database;\n","import React from \"react\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport \"./SwipeButtons.css\";\n\nconst SwipeButtons = () => {\n  return (\n    <div className=\"swipeButtons\">\n      <IconButton className=\"swipeButtons__repeat\">\n        <ReplayIcon fontSize=\"large\" />\n      </IconButton>\n\n      <IconButton className=\"swipeButtons__left\">\n        <CloseIcon fontSize=\"large\" />\n      </IconButton>\n\n      <IconButton className=\"swipeButtons__star\">\n        <StarRateIcon fontSize=\"large\" />\n      </IconButton>\n\n      <IconButton className=\"swipeButtons__right\">\n        <FavoriteIcon fontSize=\"large\" />\n      </IconButton>\n\n      <IconButton className=\"swipeButtons__lightning\">\n        <FlashOnIcon fontSize=\"large\" />\n      </IconButton>\n    </div>\n  );\n};\n\nexport default SwipeButtons;\n","import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { Link } from \"react-router-dom\";\nimport \"./Chat.css\";\n\nconst Chat = ({ name, message, profilePic, timestamp }) => {\n  return (\n    <Link to={`/chat/${name}`}>\n      <div className=\"chat\">\n        <Avatar className=\"chat__image\" alt={name} src={profilePic} />\n        <div className=\"chat__details\">\n          <h2>{name}</h2>\n          <p>{message}</p>\n        </div>\n        <p className=\"chat__timestamp\">{timestamp}</p>\n      </div>\n    </Link>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport Chat from \"../Chat/Chat\";\nimport \"./Chats.css\";\n\nconst Chats = () => {\n  return (\n    <div>\n      <Chat\n        name=\"Margot\"\n        message=\"Would you like to go out today?\"\n        timestamp=\"40 seconds ago\"\n        profilePic=\"https://medias.fashionnetwork.com/image/upload/c_fill,g_face,h_600,w_600/v1/medias/30613b89565edbc12a253f14731b105e2719683.jpg\"\n      />\n      <Chat\n        name=\"Candice\"\n        message=\"Hey! How are you 😍?\"\n        timestamp=\"35 minutes ago\"\n        profilePic=\"https://i.pinimg.com/originals/6b/9b/d8/6b9bd865cf39fc9f47f53313215faca5.jpg\"\n      />\n      <Chat\n        name=\"Mathilde\"\n        message=\"What's up ❤?\"\n        timestamp=\"3 days ago\"\n        profilePic=\"https://www.barbanews.com/wp-content/uploads/2020/06/Mathilde-Tantot.jpg\"\n      />\n      <Chat\n        name=\"Elsa\"\n        message=\"Hello😘\"\n        timestamp=\"1 week ago\"\n        profilePic=\"https://scstylecaster.files.wordpress.com/2016/05/elsa-hosk.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default Chats;\n","import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport \"./ChatScreen.css\";\n\nconst ChatScreen = () => {\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([\n    {\n      name: \"Margot\",\n      image:\n        \"https://medias.fashionnetwork.com/image/upload/c_fill,g_face,h_600,w_600/v1/medias/30613b89565edbc12a253f14731b105e2719683.jpg\",\n      message: \"Would you like to go out today?\",\n    },\n    { message: \"Hi! Of course, dear. How are you today?\" },\n  ]);\n\n  const handleSend = (e) => {\n    e.preventDefault();\n    setMessages([...messages, { message: input }]);\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chatScreen\">\n      {messages.map((message) =>\n        message.name ? (\n          <>\n            <p className=\"chatScreen__timestamp\">\n              YOU MATCHED WITH {message.name.toUpperCase()} ON 10/10/10\n            </p>\n            <div className=\"chatScreen__message\">\n              <Avatar\n                className=\"chatScreen__image\"\n                alt={message.name}\n                src={message.image}\n              />\n              <p className=\"chatScreen__text\">{message.message}</p>\n            </div>\n          </>\n        ) : (\n          <div className=\"chatScreen__message\">\n            <p className=\"chatScreen__textUser\">{message.message}</p>\n          </div>\n        )\n      )}\n      <form className=\"chatScreen__input\">\n        <input\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          className=\"chatScreen__inputField\"\n          placeholder=\"Type a message...\"\n          type=\"text\"\n        />\n        <button\n          onClick={handleSend}\n          type=\"submit\"\n          className=\"chatScreen__inputButton\"\n        >\n          SEND\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatScreen;\n","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport TinderCards from \"../TinderCards/TinderCards\";\nimport SwipeButtons from \"../SwipeButtons/SwipeButtons\";\nimport Chats from \"../Chats/Chats\";\nimport ChatScreen from \"../ChatScreen/ChatScreen\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/chat/:person\">\n            <Header backButton=\"/chat\" />\n            <ChatScreen />\n          </Route>\n          <Route path=\"/chat\">\n            <Header backButton=\"/\" />\n            <Chats />\n          </Route>\n          <Route exact path=\"/\">\n            <Header />\n            <TinderCards />\n            <SwipeButtons />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\n{\n  /* <h1>Let's build the TINDER clone💏</h1> */\n}\n{\n  /* Header */\n}\n{\n  /* tinder cards */\n}\n{\n  /* Buttons below tinder cards */\n}\n{\n  /* Chat screen */\n}\n{\n  /* Individual chat screen */\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}